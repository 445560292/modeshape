<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ JBoss, Home of Professional Open Source.
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="introduction">
  <title>Introduction</title>
  <para>There are a lot of ways for applications to store information persistently so that it can be accessed at a
    later time and by other processes. The challenge developers face is how to use an approach that most closely matches the
    needs of their application. This choice becomes more important as developers choose to focus their efforts on
    application-specific logic, delegating much of the responsibilities for persistence to libraries and frameworks.</para>
  <para>
    Perhaps one of the easiest techniques is to simply store information in
    <emphasis>files</emphasis>
    . The Java language makes working with files relatively easy, but Java really doesn't provide many bells and whistles. So
    using files is an easy choice when the information is either not complicated (for example property files), or when users may
    need to read or change the information outside of the application (for example log files or configuration files). But using
    files to persist information becomes more difficult as the information becomes more complex, as the volume of it increases,
    or if it needs to be accessed by multiple processes. For these situations, other techniques often have more benefits.
  </para>
  <para>
    Another technique built into the Java language is
    <emphasis>Java serialization</emphasis>
    , which is capable of persisting the state of an object graph so that it can be read back in at a later time. However, Java
    serialization can quickly become tricky if the classes are changed, and so it's beneficial usually when the information is
    persisted for a very short period of time. For example, serialization is sometimes used to send an object graph from one
    process to another.  Using serialization for longer-term storage of information is more risky.
  </para>
  <para>
    One of the more popular and widely-used persistence technologies is the <emphasis>relational database</emphasis>. 
		Relational database management systems have been around for decades and are very capable. The Java Database Connectivity
    (JDBC) API provides a standard interface for connecting to and interacting with relational databases. However, it is a
    low-level API that requires a lot of code to use correctly, and it still doesn't abstract away the DBMS-specific SQL
    grammar. Also, working with relational data in an object-oriented language can feel somewhat unnatural, so many developers
    map this data to classes that fit much more cleanly into their application. The problem is that manually creating this
    mapping layer requires a lot of repetitive and non-trivial JDBC code.
  </para>
  <para>
    <emphasis>Object-relational mapping</emphasis>
    libraries automate the creation of this mapping layer and result in far less code that is much more maintainable with
    performance that is often as good as (if not better than) handwritten JDBC code. The new
    <ulink url="http://java.sun.com/developer/technicalArticles/J2EE/jpa/">Java Persistence API (JPA)</ulink>
    provide a standard mechanism for defining the mappings (through annotations) and working with these entity objects. Several
    commercial and open-source libraries implement JPA, and some even offer additional capabilities and features that go beyond
    JPA. For example, <ulink url="http://www.hibernate.org">Hibernate</ulink> is one of the most feature-rich JPA implementations
		and offers object caching, statement caching, extra association
    mappings, and other features that help to improve performance and usefulness.  Plus, Hibernate is open-source (with support
		offered by <ulink url="http://www.jboss.com">JBoss</ulink>).
  </para>
  <para>
    While relational databases and JPA are solutions that work well for many applications, they are more limited in cases when the
    information structure is highly flexible, the structure is not known <emphasis>a priori</emphasis>, or that structure is
 		subject to frequent change and customization. In these situations, <emphasis>content repositories</emphasis>
    may offer a better choice for persistence. Content repositories are almost a hybrid with the storage capabilities of
 		relational databases and the flexibility offered by other systems, such as using files.  Content repositories also
    typically provide other capabilities as well, including versioning, indexing, search, access control,
    transactions, and observation. Because of this, content repositories are used by content management systems (CMS), document
    management systems (DMS), and other applications that manage electronic files (e.g., documents, images, multi-media, web
    content, etc.) and metadata associated with them (e.g., author, date, status, security information, etc.). The
    <ulink url="http://www.jcp.org/en/jsr/detail?id=170">Content Repository for Java technology API</ulink>
    provides a standard Java API for working with content repositories. Abbreviated "JCR", this API was developed as part of the
    Java Community Process under <ulink url="http://www.jcp.org/en/jsr/detail?id=170">JSR-170</ulink>
    and is being revised under <ulink url="http://www.jcp.org/en/jsr/detail?id=283">JSR-283</ulink>.
  </para>
  <para>
    The <emphasis>JBoss DNA project</emphasis>
    is building unified metadata repository system that is compliant with JCR.  Nearly all of these capabilities are to be hidden
    below the JCR API and involve automated processing of the information in the repository. Thus, JBoss DNA can add value to
    existing repository implementations. For example, JCR repositories offer the ability to upload files into the repository and
    have the file content indexed for search purposes. JBoss DNA also defines a library for "sequencing" content - to extract
    meaningful information from that content and store it in the repository, where it can then be searched, accessed, and
    analyzed using the JCR API.
  </para>
  <para> JBoss DNA has other features as well.  You can create federated repositories that dynamically merge the information 
	  from multiple databases, services, applications, and other JCR repositories.  JBoss DNA also will allow you to 
    create customized views based upon the type of data and the role of the user that is accessing the data. And yet another is
    to create a REST-ful API to allow the JCR content to be accessed easily by other applications written in other languages.
  </para>
  <para>
    The <link linkend="understanding_dna">next chapter</link> in this book goes into more detail about JBoss DNA and its architecture, 
		the different components, what's available now, and what's coming in future releases.
    <link linkend="downloading_and_running">Chapter 3</link> then provides instructions for downloading and running the sequencer 
		examples for the current release. <link linkend="using_dna">Chapter 4</link> walks through how to use JBoss DNA sequencers 
		in your applications, while <link linkend="custom_sequencers">Chapter 5</link> shows how to use JBoss DNA repositories.
		<link linkend="custom_sequencers">Chapter 6</link> goes over how to create custom sequencers, and finally,
    <link linkend="future">Chapter 7</link> wraps things up with a discussion about the future of JBoss DNA.
  </para>
</chapter>
