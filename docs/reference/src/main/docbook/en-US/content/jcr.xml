<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ JBoss, Home of Professional Open Source.
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"	[
<!ENTITY % CustomDTD SYSTEM "../custom.dtd">
%CustomDTD;
]>
<chapter id="jcr">
  <title>Content Repositories for Java (JCR)</title>
  <para>
  	The
    <ulink url="&JSR170;">Content Repository for Java technology API</ulink>
    provides a standard Java API for working with content repositories. Abbreviated "JCR", this API was developed as part of the
    Java Community Process under <ulink url="&JSR170;">JSR-170</ulink> (JCR 1.0) and is being revised under <ulink url="&JSR283;">JSR-283</ulink>.
		JBoss DNA provides a JCR 1.0 implementation that allows you to work with the contents of a repository using the
		JCR API.  For information about how to use the JCR API, please see the <ulink url="&JSR170;">JSR-170</ulink> specification.
  </para>
  <sect1 id="jcr-repositories">
    <title>Obtaining JCR repositories</title>
		<para>The JCR API doesn't define how your application first obtains a reference to a &Repository; implementation.
			With JBoss DNA, you simply creating a &JcrRepository; object and supply
			an &ExecutionContextFactory; and a &RepositoryConnectionFactory; (such as a &RepositoryLibrary; or &RepositoryService;).
			Since &JcrRepository; implements the JCR &Repository; interface, from this point forward you can just use the
			standard JCR API.
		</para>
		<note>
			<para>
				For more information about the &ExecutionContextFactory; and &RepositoryConnectionFactory; classes, see
				the chapter on <link linkend="environment">setting up a JBoss DNA environment</link> and
				<link linkend="repositories">setting up the &RepositoryService;</link>.
			</para>
		</note>
  </sect1>
  <sect1 id="jcr-sessions">
    <title>Creating JCR sessions</title>
		<para>Creating sessions is done using a &Repository; one of its <code>login(...)</code> methods, where the
			name of the workspace corresponds to the name of the &RepositorySource;:
		</para>
    <programlisting>
&JcrRepository; jcrRepository = new &JcrRepository;(contextFactory, sources);
&Session; session = jcrRepository.login(sourceName);
</programlisting>
		<para>
			Now, this code doesn't do any authentication; it essentially trusts the caller has the appropriate privileges.
			Normally, your application will need to authenticate the user, so let's look at how that's done.
		</para>
		<para>
			As we mentioned in the <link linkend="security">security section</link>, JBoss DNA uses JAAS for authentication
			and authorization.  So how does this work with the JCR API?
		</para>
		<para>The JCR API defines a &Credentials; marker interface, an instance of which can be passed to the
		  <code>&Session;.login(...)</code> method.  Rather than provide a concrete implementation of this interface, JBoss DNA
		  allows you to pass any implementation of &Credentials; that also has one of the following methods:
		  <itemizedlist>
			  <listitem>
					<para><code>getLoginContext()</code> that returns a &LoginContext; instance.</para>
				</listitem>
			  <listitem>
					<para><code>getAccessControlContext()</code> that returns a &AccessControlContext; instance.</para>
				</listitem>
			</itemizedlist>
			This way, your application can obtain the JAAS &LoginContext; or &AccessControlContext; however it wants,
			and then merely passes that into DNA through the JCR &Credentials;.  No interfaces or classes specific to JBoss DNA are required.
		</para>
		<para>
			The following code shows how this is done, using an anonymous inner class for the &Credentials; implementation.
		</para>
    <programlisting>
&CallbackHandler; callbackHandler = // as needed by your app, according to JAAS
final &LoginContext; loginContext = new &LoginContext;("MyAppContextName",callbackHandler);

// Now pass to JBoss DNA to create a JCR Session ...
&Credentials; credentials = new &Credentials;() {
public &LoginContext; getLoginContext() { return loginContext; }
};
&JcrRepository; jcrRepository = new &JcrRepository;(contextFactory, sources);
&Session; session = jcrRepository.login(credentials, sourceName);
</programlisting>
  </sect1>
</chapter>
