<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ JBoss, Home of Professional Open Source.
  ~
  ~ Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
  ~ indicated by the @author tags or express copyright attribution
  ~ statements applied by the authors.  All third-party contributions are
  ~ distributed under license by Red Hat Middleware LLC.
  ~
  ~ This copyrighted material is made available to anyone wishing to use, modify,
  ~ copy, or redistribute it subject to the terms and conditions of the GNU
  ~ Lesser General Public License, as published by the Free Software Foundation.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="introduction">
  <title>Introduction to JBoss DNA</title>
  <para>There are a lot of choices for how applications can store information persistently so that it can be accessed at a
    later time and by other processes. The challenge developers face is how to use an approach that most closely matches the
    needs of their application. This choice becomes more important as developers choose to focus their efforts on
    application-specific logic, delegating much of the responsibilities for persistence to libraries and frameworks.</para>
  <para>
    Perhaps one of the easiest techniques is to simply store information in
    <emphasis>files</emphasis>
    . The Java language makes working with files relatively easy, but Java really doesn't provide many bells and whistles. So
    using files is an easy choice when the information is either not complicated (for example property files), or when users may
    need to read or change the information outside of the application (for example log files or configuration files). But using
    files to persist information becomes more difficult as the information becomes more complex, as the volume of it increases,
    or if it needs to be accessed by multiple processes. For these situations, other techniques often offer better choices.
  </para>
  <para>
    Another technique built into the Java language is
    <emphasis>Java serialization</emphasis>
    , which is capable of persisting the state of an object graph so that it can be read back in at a later time. However, Java
    serialization can quickly become tricky if the classes are changed, and so it's beneficial usually when the information is
    persisted for a very short period of time. For example, serialization is sometimes used to send an object graph from one
    process to another.
  </para>
  <para>
    One of the more popular persistence technologies is the
    <emphasis>relational database</emphasis>
    . Relational database management systems have been around for decades and are very capable. The Java Database Connectivity
    (JDBC) API provides a standard interface for connecting to and interacting with relational databases. However, it is a
    low-level API that requires a lot of code to use correctly, and it still doesn't abstract away the DBMS-specific SQL
    grammar. Also, working with relational data in an object-oriented language can feel somewhat unnatural, so many developers
    map this data to classes that fit much more cleanly into their application. The problem is that manually creating this
    mapping layer requires a lot of repetitive and non-trivial JDBC code.
  </para>
  <para>
    <emphasis>Object-relational mapping</emphasis>
    libraries automate the creation of this mapping layer and result in far less code that is much more maintainable with
    performance that is often as good as (if not better than) handwritten JDBC code. The new
    <ulink url="http://java.sun.com/developer/technicalArticles/J2EE/jpa/">Java Persistence API (JPA)</ulink>
    provide a standard mechanism for defining the mappings (through annotations) and working with these entity objects. Several
    commercial and open-source libraries implement JPA, and some even offer additional capabilities and features that go beyond
    JPA. For example,
    <ulink url="http://www.hibernate.org">Hibernate</ulink>
    is one of the most feature-rich JPA implementations and offers object caching, statement caching, extra association
    mappings, and other features that help to improve performance and usefulness.
  </para>
  <para>
    While relational databases and JPA are solutions that work for many applications, they become more limited in cases when the
    information structure is highly flexible, is not known
    <emphasis>a priori</emphasis>
    , or is subject to frequent change and customization. In these situations,
    <emphasis>content repositories</emphasis>
    may offer a better choice for persistence. Content repositories are almost a hybrid between relational databases and file
    systems, and typically provide other capabilities as well, including versioning, indexing, search, access control,
    transactions, and observation. Because of this, content repositories are used by content management systems (CMS), document
    management systems (DMS), and other applications that manage electronic files (e.g., documents, images, multi-media, web
    content, etc.) and metadata associated with them (e.g., author, date, status, security information, etc.). The
    <ulink url="http://www.jcp.org/en/jsr/detail?id=170">Content Repository for Java technology API</ulink>
    provides a standard Java API for working with content repositories. Abbreviated "JCR", this API was developed as part of the
    Java Community Process under
    <ulink url="http://www.jcp.org/en/jsr/detail?id=170">JSR-170</ulink>
    and is being revised under
    <ulink url="http://www.jcp.org/en/jsr/detail?id=283">JSR-283</ulink>
    .
  </para>
  <para>
    The
    <emphasis>JBoss DNA project</emphasis>
    is building the tools and services that surround content repositories. Nearly all of these capabilities are to be hidden
    below the JCR API and involve automated processing of the information in the repository. Thus, JBoss DNA can add value to
    existing repository implementations. For example, JCR repositories offer the ability to upload files into the repository and
    have the file content indexed for search purposes. JBoss DNA also defines a library for "sequencing" content - to extract
    meaningful information from that content and store it in the repository, where it can then be searched, accessed, and
    analyzed using the JCR API.
  </para>
  <para> JBoss DNA is building other features as well. One goal of JBoss DNA is to create federated repositories that
    dynamically merge the information from multiple databases, services, applications, and other JCR repositories. Another is to
    create customized views based upon the type of data and the role of the user that is accessing the data. And yet another is
    to create a REST-ful API to allow the JCR content to be accessed easily by other applications written in other languages.
  </para>
  <sect1 id="roadmap">
    <title>Project roadmap</title>
    <para>
      The roadmap for JBoss DNA is managed in the project's
      <ulink url="https://jira.jboss.org/jira/browse/DNA">JIRA instance</ulink>
      . The roadmap shows the different tasks, requirements, issues and other activities that have been targeted to each of the
      upcoming releases. (The
      <ulink url="https://jira.jboss.org/jira/browse/DNA?report=com.atlassian.jira.plugin.system.project:roadmap-panel">roadmap report</ulink>
      always shows the next three releases.)
    </para>
    <para>
      By convention, JIRA issues not immediately targeted to a release will be reviewed periodically to determine the
      appropriate release where they can be targeted. Any issue that is reviewed and that does not fit in a known release will
      be targeted to the
      <ulink url="https://jira.jboss.org/jira/browse/DNA?report=com.atlassian.jira.plugin.system.project:roadmap-panel">Future Releases</ulink>
      bucket. This should be reviewed periodically and at least at the beginning of each release cycle, with the goal of
      targeting most of the issues to specific releases.
    </para>
  </sect1>
  <sect1 id="modules">
    <title>JBoss DNA modules</title>
    <para>
      JBoss DNA consists of the following modules:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">dna-common</emphasis>
            is a low-level library of common utilities and frameworks, including logging, progress monitoring,
            internationalization/localization, text translators, component management, and class loader factories.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-spi</emphasis>
            defines the Service Provider Interface (SPI) for DNA, including the repository connectors, sequencers, graph
            interfaces, and MIME type detectors.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-repository</emphasis>
            is the main module and provides the repository-oriented services, including the Repository Service, Sequencing
            Service, Observation Service, and Rules Service.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-jcr</emphasis>
            provides the JBoss DNA implementation of the JCR API, which relies upon a repository connector, such as the
            Federation Connector (see
            <code>dna-connector-federation</code>
            ).
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-integration-tests</emphasis>
            provides a home for all of the integration tests that involve more components that just unit tests. Integration
            tests are often more complicated, take longer, and involve testing the integration and functionality of many
            components (whereas unit tests focus on testing a single class or component and may use stubs or mock objects for
            other components).
          </para>
        </listitem>
      </itemizedlist>
      The following modules are optional extensions that may be used selectively and as needed (and are located in the source
      under the
      <code>extensions</code>
      directory):
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">dna-maven-classloader</emphasis>
            is a small library that provides a
            <code>ClassLoaderFactory</code>
            implementation that can create
            <code>java.lang.ClassLoader</code>
            instances capable of loading classes given a Maven Repository and a list of Maven coordinates. The Maven Repository
            can be managed within a JCR repository.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-connector-federation</emphasis>
            is a DNA repository connector that federates, integrates and caches information from multiple sources (via other
            repository connectors).
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-connector-inmemory</emphasis>
            is a simple DNA repository connector that manages content within memory. This can be used as a simple cache or as a
            transient repository.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-connector-jbosscache</emphasis>
            is a DNA repository connector that manages content within a
            <ulink url="http://www.jboss.org/jbosscache/">JBoss Cache</ulink>
            instance. JBoss Cache is a powerful cache implementation that can serve as a distributed cache and that can persist
            information. The cache instance can be found via JNDI or created and managed by the connector.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-sequencer-zip</emphasis>
            is a DNA sequencer that extracts from ZIP archives the files (with content) and folders.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-sequencer-images</emphasis>
            is a DNA sequencer that extracts the image metadata (e.g., size, date, etc.) from PNG, JPEG, GIF, BMP, PCS, IFF,
            RAS, PBM, PGM, and PPM image files.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-sequencer-mp3</emphasis>
            is a DNA sequencer that extracts metadata (e.g., author, album name, etc.) from MP3 audio files.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-sequencer-java</emphasis>
            is a DNA sequencer that extracts the package, class/type, member, documentation, annotations, and other information
            from Java source files.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-sequencer-msoffice</emphasis>
            is a DNA sequencer that extracts metadata and summary information from
            <ulink url="http://office.microsoft.com/en-us/">Microsoft Office</ulink>
            documents. For example, the sequencer extracts from a PowerPoint presentation the outline as well as thumbnails of
            each slide. Microsoft Word and Excel files are also supported.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-sequencer-cnd</emphasis>
            is a DNA sequencer that extracts JCR node definitions from JCR Compact Node Definition (CND) files.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">dna-mimetype-detector-aperture</emphasis>
            is a DNA MIME type detector that uses the
            <ulink url="http://aperture.sourceforge.net/">Aperture</ulink>
            library to determine the best MIME type from the filename and file contents.
          </para>
        </listitem>
      </itemizedlist>
      There are also documentation modules (located in the source under the
      <code>docs</code>
      directory):
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">docs-getting-started</emphasis>
            is the project with the
            <ulink url="http://www.docbook.org/">DocBook</ulink>
            source for the JBoss DNA Getting Started document.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">docs-getting-started-examples</emphasis>
            is the project with the Java source for the example application used in the JBoss DNA Getting Started document.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">docs-reference-guide</emphasis>
            is the project with the
            <ulink url="http://www.docbook.org/">DocBook</ulink>
            source for this document, the JBoss DNA Reference Guide document.
          </para>
        </listitem>
      </itemizedlist>
      Finally, there is a module that represents the whole JBoss DNA project:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">dna</emphasis>
            is the parent project that aggregates all of the other projects and that contains some asset files to create the
            necessary Maven artifacts during a build.
          </para>
        </listitem>
      </itemizedlist>
      Each of these modules is a Maven project with a group ID of
      <code>org.jboss.dna</code>
      . All of these projects correspond to artifacts in the
      <ulink url="http://repository.jboss.com/maven2/">JBoss Maven 2 Repository</ulink>
      .
    </para>
  </sect1>
</chapter>
