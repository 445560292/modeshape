<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ JBoss DNA (http://www.jboss.org/dna)
  ~
  ~ See the COPYRIGHT.txt file distributed with this work for information
  ~ regarding copyright ownership.  Some portions may be licensed
  ~ to Red Hat, Inc. under one or more contributor license agreements.
  ~ See the AUTHORS.txt file in the distribution for a full listing of 
  ~ individual contributors.
  ~
  ~ JBoss DNA is free software. Unless otherwise indicated, all code in JBoss DNA
  ~ is licensed to you under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ JBoss DNA is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"	[
<!ENTITY % CustomDTD SYSTEM "../../custom.dtd">
%CustomDTD;
]>
<chapter id="jcr">
  <title>Content Repositories for Java (JCR)</title>
  <para>
  	The
    <ulink url="&JSR170;">Content Repository for Java technology API</ulink>
    provides a standard Java API for working with content repositories. Abbreviated "JCR", this API was developed as part of the
    Java Community Process under <ulink url="&JSR170;">JSR-170</ulink> (JCR 1.0) and is being revised under <ulink url="&JSR283;">JSR-283</ulink>.
		JBoss DNA provides a partial JCR 1.0 implementation that allows you to work with the contents of a repository using the
		JCR API.  For information about how to use the JCR API, please see the <ulink url="&JSR170;">JSR-170</ulink> specification.
  </para>
  <sect1 id="jcr-repositories">
    <title>Obtaining JCR repositories</title>
		<para>The JCR API doesn't define how your application first obtains a reference to a &Repository; implementation.
			With JBoss DNA, you simply creating a &JcrRepository; object and supply
			an &ExecutionContextFactory; and a &RepositoryConnectionFactory; (such as a &RepositoryLibrary; or &RepositoryService;).
			Since &JcrRepository; implements the JCR &Repository; interface, from this point forward you can just use the
			standard JCR API.
		</para>
		<note>
			<para>
				For more information about the &ExecutionContextFactory; and &RepositoryConnectionFactory; classes, see
				the chapter on <link linkend="environment">setting up a JBoss DNA environment</link> and
				<link linkend="repositories">setting up the &RepositoryService;</link>.
			</para>
		</note>
  </sect1>
  <sect1 id="jcr-sessions">
    <title>Creating JCR sessions</title>
		<para>Creating sessions is done using a &Repository; one of its <code>login(...)</code> methods, where the
			name of the workspace corresponds to the name of the &RepositorySource;:
		</para>
    <programlisting>
&JcrRepository; jcrRepository = new &JcrRepository;(contextFactory, sources);
&Session; session = jcrRepository.login(sourceName);
</programlisting>
		<para>
			Now, this code doesn't do any authentication; it essentially trusts the caller has the appropriate privileges.
			Normally, your application will need to authenticate the user, so let's look at how that's done.
		</para>
		<para>
			As we mentioned in the <link linkend="security">security section</link>, JBoss DNA uses JAAS for authentication
			and authorization.  So how does this work with the JCR API?
		</para>
		<para>The JCR API defines a &Credentials; marker interface, an instance of which can be passed to the
		  <code>&Session;.login(...)</code> method.  Rather than provide a concrete implementation of this interface, JBoss DNA
		  allows you to pass any implementation of &Credentials; that also has one of the following methods:
		  <itemizedlist>
			  <listitem>
					<para><code>getLoginContext()</code> that returns a &LoginContext; instance.</para>
				</listitem>
			  <listitem>
					<para><code>getAccessControlContext()</code> that returns a &AccessControlContext; instance.</para>
				</listitem>
			</itemizedlist>
			This way, your application can obtain the JAAS &LoginContext; or &AccessControlContext; however it wants,
			and then merely passes that into DNA through the JCR &Credentials;.  No interfaces or classes specific to JBoss DNA are required.
		</para>
		<para>
			The following code shows how this is done, using an anonymous inner class for the &Credentials; implementation.
		</para>
    <programlisting>
&CallbackHandler; callbackHandler = // as needed by your app, according to JAAS
final &LoginContext; loginContext = new &LoginContext;("MyAppContextName",callbackHandler);

// Now pass to JBoss DNA to create a JCR Session ...
&Credentials; credentials = new &Credentials;() {
public &LoginContext; getLoginContext() { return loginContext; }
};
&JcrRepository; jcrRepository = new &JcrRepository;(contextFactory, sources);
&Session; session = jcrRepository.login(credentials, sourceName);
</programlisting>
  </sect1>
	<sect1>
		<title>JCR Support</title>
		<para>
			JBoss DNA currently supports most of the Level 1 and Level 2 feature set defined by the <ulink url="&JSR170;">JSR-170</ulink> specification.
			Queries, which are part of Level 1, are not implemented, nor are all of the update methods that make up Level 2.
			So while the current implementation provides many of the features that may be needed by an application, we really hope
			that this release will allow you to give us some feedback on what we have so far.
		</para>
	</sect1>
	<sect1>
		<title>Summary</title>
		<para>
			In this chapter, we covered how to use JCR with JBoss DNA.  Now that you know how JBoss DNA repositories work,
			and how to use JCR to work with DNA repositories, we'll move on in 
			the <link linkend="sequencing">next chapter</link> to describing in detail how the sequencing of file content works.
		</para>
	</sect1>
</chapter>
