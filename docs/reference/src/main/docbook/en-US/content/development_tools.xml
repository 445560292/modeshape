<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ JBoss DNA (http://www.jboss.org/dna)
  ~
  ~ See the COPYRIGHT.txt file distributed with this work for information
  ~ regarding copyright ownership.  Some portions may be licensed
  ~ to Red Hat, Inc. under one or more contributor license agreements.
  ~ See the AUTHORS.txt file in the distribution for a full listing of 
  ~ individual contributors.
  ~
  ~ JBoss DNA is free software. Unless otherwise indicated, all code in JBoss DNA
  ~ is licensed to you under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ JBoss DNA is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<!DOCTYPE preface PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"	[
<!ENTITY % CustomDTD SYSTEM "../custom.dtd">
%CustomDTD;
]>
<chapter id="development-tools">
  <title>Developer tools</title>
  <para>
		The JBoss DNA project uses <link linkend="maven">Maven</link> as its primary build tool, <link linkend="svn">Subversion</link>
		for its source code repository, <link linkend="jira">JIRA</link> for the issue management and bug tracking system,
		and <link linkend="hudson">Hudson</link> for the continuous integration system.  We do not stipulate a specific integrated
		development environment (IDE), although most of us use <link linkend="eclipse">Eclipse</link> and rely upon the code formatting
		and compile preferences to ensure no warnings or errors.
  </para>
	<para>
		The rest of this chapter talks in more detail about these different tools and how to set them up.
	</para>
	<sect1 id="jdk">
		<title>JDK</title>
		<para>
			Currently, JBoss DNA is developed and built using <ulink url="http://java.sun.com/javase/downloads/index_jdk5.jsp">JDK 5</ulink>.
			So if you're trying to get JBoss DNA to compile locally, you should make sure you have the JDK 5 installed and are using it.
			If you're a contributor, you should make sure that you're using JDK 5 before committing any changes.  
		</para>
		<note>
			<para>
				You should be able to use the <ulink url="http://java.sun.com/javase/downloads/index.jsp">latest JDK</ulink>,
				which is currently JDK 6.  It is possible to build JBoss DNA using JDK 6 without any code changes, but it's 
				not our official JDK (yet).
			</para>
			<para>
				Why do we build using JDK 5 and not 6? The main reason is that if we were to use JDK 6, then JBoss DNA couldn't really be used in any
				applications or projects that still used JDK 5.  Plus, anybody using JDK 6 can still use JBoss DNA.
				However, considering that the end-of-life for Java 5 is 
				<ulink url="http://java.sun.com/products/archive/eol.policy.html">October 2009</ulink>, we may be switching to 
				Java 6 sometime in 2009.
			</para>
		</note>
		<para>
			When installing a JDK, simply follow the procedure for your particular platform.  On most platforms, this should set the
			<code>JAVA_HOME</code> environment variable.  But if you run into any problems, first check that this environment
			variable was set to the correct location, and then check that you're running the version you expect by running
			the following command:
		</para>
		<programlisting>$ java -version</programlisting>
		<para>
			If you don't see the correct version, double-check your JDK installation.
		</para>
	</sect1>
	<sect1 id="jira">
		<title>JIRA</title>
		<para>
			JBoss DNA uses <ulink url="&JIRA;">JIRA</ulink> as its bug tracking, issue tracking, and project management tool.
			This is a browser-based tool, with very good functionality for managing the different tasks.  It also serves as
			the community's roadmap, since we can define new features and manage them along side the bugs and other issues.
			Although most of the issues have been created by community members, we encourage any users to suggest new features,
			log defects, or identify shortcomings in JBoss DNA.
		</para>
		<para>
			The JBoss DNA community also encourages its members to work only issues that are managed in JIRA, and preferably those
			that are targeted to the current release effort.  If something isn't in JIRA but needs to get done, then create an 
			issue before you start working on the code changes.  Once you have code changes, you can upload a patch to the JIRA issue
			if the change is complex, if you want someone to review it, or if you don't have commit privileges and have fixed
			a bug.
		</para>
	</sect1>
	<sect1 id="svn">
		<title>Subversion</title>
		<para>JBoss DNA uses Subversion as its source code management system, and specifically the instance at 
			<ulink url="http://www.jboss.org">JBoss.org</ulink>.  Although you can view the
			<ulink url="&Subversion;trunk/">trunk</ulink> of the Subversion repository directly
			(or using <ulink url="&Fisheye;trunk">FishEye</ulink>) through your browser,
			it order to get more than just a few files of the latest version of the source code, you probably want
		 	to have an SVN client installed.  Several IDE's have SVN support included (or available as plugins),
			but having the command-line SVN client is recommended.  See 
			<ulink url="http://subversion.tigris.org/">http://subversion.tigris.org/</ulink> for downloads and instructions for your
			particular platform.
		</para>
		<para>
			Here are some useful URLs for the JBoss DNA Subversion:
		</para>
		<table frame='all'>
			<title>SVN URLs for JBoss DNA</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	      <colspec colname='c1' colwidth="1*"/>
	      <colspec colname='c2' colwidth="1*"/>
				<thead>
					<row>
			  		<entry>Repository</entry>
			  		<entry>URL</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>Anonymous Access URL</entry>
						<entry><ulink url="&Subversion;trunk/">&Subversion;trunk/</ulink></entry>
					</row>
					<row>
						<entry>Secure Developer Access URL</entry>
						<entry><ulink url="&Fisheye;trunk/">&Fisheye;trunk/</ulink></entry>
					</row>
					<row>
						<entry>FishEye Code Browser</entry>
						<entry><ulink url="&SecureSubversion;trunk/">&SecureSubversion;trunk/</ulink></entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			When committing to SVN, be sure to include in a commit comment that includes the JIRA issue that the commit applies to and a very
			good and thorough description of what was done.  It only takes a minute or two to be very clear about the change.  And including
			the JIRA issue (e.g., "DNA-123") in the comment allows the JIRA system to track the changes that have been made for each issue.
		</para>
		<para>
			Also, any single SVN commit should apply to one and only one JIRA issue.  Doing this helps ensure that each commit is atomic
			and focused on a single activity.  There are exceptions to this rule, but they are rare.
		</para>
		<para>
			Sometimes you may have some local changes that you don't want to (or aren't allowed to) commit.  You can make a patch file
			and upload it to the JIRA issue, allowing other committers to review the patch.  However, to ensure that patches are easily
			applied, please use SVN to create the patch.  To do this, simply do the following in the top of the codebase (e.g., the 
			<code>trunk</code> directory):
		</para>
		<programlisting>$ svn diff . > ~/DNA-000.patch</programlisting> 
		<para>
			where <code>DNA-000</code> represents the DNA issue number.  Note that the above command places the patch file in your home directory,
			but you can place the patch file anywhere.  Then, simply use JIRA to attach the patch file to the particular issue, also adding
			a comment that describes the version number against which the patch was created.
		</para>
		<para>
			To apply a patch, you usually want to start with a workspace that has no changes.  Download the patch file, then issue the
			following command (again, from the top-level of the workspace):
		</para>
		<programlisting>$ patch -E -p0 &lt; ~/DNA-000.patch</programlisting> 
		<para>
			The "-E" option specifies to delete any files that were made empty by the application of the patch, and the "-p0" option instructs
			the patch tool to not change any of the paths.  After you run this command, your working area should have the changes defined
			by the patch.
		</para>
	</sect1>
	<sect1 id="maven">
		<title>Maven</title>
		<para>JBoss DNA uses Maven 2 for its build system, as is this example. Using Maven 2 has several advantages, including
	    the ability to manage dependencies. If a library is needed, Maven automatically finds and downloads that library, plus
	    everything that library needs. This means that it's very easy to build the examples - or even create a maven project that
	    depends on the JBoss DNA JARs.</para>
		<para>
      To use Maven with JBoss DNA, you'll need to have <link linkend="jdk">JDK 5 or 6</link> and Maven 2.0.9 (or higher).</para>
		<para>
      Maven can be downloaded from <ulink url="http://maven.apache.org/">http://maven.apache.org/</ulink>, and is installed by unzipping the
      <code>maven-2.0.9-bin.zip</code> file to a convenient location on your local disk. Simply add <code>$MAVEN_HOME/bin</code>
      to your path and add the following profile to your <code>~/.m2/settings.xml</code> file:
		</para>
		<programlisting role="XML"><![CDATA[
<settings>
  <profiles>
    <profile>
      <id>jboss.repository</id>
      <activation>
        <property>
          <name>!jboss.repository.off</name>
        </property>
      </activation>
      <repositories>
        <repository>
          <id>snapshots.jboss.org</id>
          <url>http://snapshots.jboss.org/maven2</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </repository>
        <repository>
          <id>repository.jboss.org</id>
          <url>http://repository.jboss.org/maven2</url>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <id>repository.jboss.org</id>
          <url>http://repository.jboss.org/maven2</url>
          <snapshots>
            <enabled>false</enabled>
          </snapshots>
        </pluginRepository>
        <pluginRepository>
          <id>snapshots.jboss.org</id>
          <url>http://snapshots.jboss.org/maven2</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
</settings>
]]></programlisting>
		<para>This profile informs Maven of the two JBoss repositories (<ulink url="http://repository.jboss.org/maven2">snapshots</ulink> 
		  and <ulink url="http://snapshots.jboss.org/maven2">releases</ulink>) that contain all of the JARs for JBoss DNA and all dependent libraries.
		</para>
		<note>
			<para>
		    It is a policy of the project that the <emphasis>source code and JARs</emphasis> for <emphasis>all</emphasis> dependencies 
		    <emphasis>must</emphasis> be loaded into the JBoss repository.  This is so that the project can always be built
				and that all source code is always available.
			</para>
			<para>
				For more information about the JBoss Maven repository, see the <ulink url="http://wiki.jboss.org/wiki/Maven">JBoss.org Wiki</ulink>.
			</para>
		</note>
		<para>
			There are just a few commands that are useful for building JBoss DNA (and it's <link linkend="modules">subprojects</link>).
			Usually, these are issued while at the top level of the code (usually just below <code>trunk/</code>), although issuing
			them inside a subproject just applies to that subproject.
		</para>
		<table frame='all'>
			<title>Useful Maven commands</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	      <colspec colname='c1' colwidth="1*"/>
	      <colspec colname='c2' colwidth="1*"/>
				<thead>
					<row>
			  		<entry>Command</entry>
			  		<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><code>mvn clean</code></entry>
						<entry>Clean up all built artifacts (e.g., the <code>target/</code> directory in each project)</entry>
					</row>
					<row>
						<entry><code>mvn clean install</code></entry>
						<entry>Clean up all built artifacts, then compile, run the unit tests, and install the resulting JAR artifact(s)
							into your local Maven repository (e.g, usually <code>~/.m2/repository</code>).
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</sect1>
	<sect1 id="hudson">
		<title>Continuous integration with Hudson</title>
		<para>JBoss DNA's continuous integration is done with several Hudson jobs on <ulink url="http://www.jboss.org">JBoss.org</ulink>.
		  These jobs run periodically and basically run the Maven build process.  Any build failures or test failures are reported,
		  as are basic statistics and history for each job.
		</para>
		<table frame='all'>
			<title>Continuous integration jobs</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	      <colspec colname='c1' colwidth="1*"/>
	      <colspec colname='c2' colwidth="1*"/>
				<thead>
					<row>
			  		<entry>Job</entry>
			  		<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><ulink url="http://hudson.jboss.org/hudson/job/DNA%20continuous%20on%20JDK1.5/">Continuous on JDK 5</ulink></entry>
						<entry>Continuous build that runs after changes are committed to SVN.  SVN is polled every 15 minutes.</entry>
					</row>
					<row>
						<entry><ulink url="http://hudson.jboss.org/hudson/job/DNA%20nightly%20integration%20on%20JDK1.5/">Nightly on JDK 5</ulink></entry>
						<entry>Build that runs every night (usually around 2 a.m. EDT), regardless of whether changes have been committed to SVN
							since the previous night.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</sect1>
	<sect1 id="eclipse">
		<title>Eclipse IDE</title>
		<para>Many of the JBoss DNA committers use the Eclipse IDE, and all project files required by Eclipse are committed in SVN, making
			it pretty easy to get an Eclipse workspace running with all of the JBoss DNA projects.
			Many of the JBoss DNA committers use the Eclipse IDE, and all project files required by Eclipse are committed in SVN, making
			it pretty easy to get an Eclipse workspace running with all of the JBoss DNA projects.
		</para>
		<para>We're using the latest released version of Eclipse (3.4, called "Ganymede"), 
			available from <ulink url="http://www.eclipse.org/">Eclipse.org</ulink>.  Simply follow the instructions for your platform.
		</para>
		<para>
			After Eclipse is installed, create a new workspace.  Before importing the JBoss DNA projects, import (via 
			<emphasis role="strong">File->Import->Preferences</emphasis>) the subset of the Eclipse preferences by importing the 
			<code>eclipse-preferences.epf</code> file (located under <code>trunk</code>). Then, open the Eclipse preferences and 
			open the <emphasis role="strong">Java->Code Style-> Formatter</emphasis> preference page, and press the "Import" button and
			choose the <code>eclipse-code-formatter-profile.xml</code> file (also located under <code>trunk</code>).  This will load the code
			formatting preferences for the JBoss DNA project.
		</para>
		<para>
			Then install Eclipse plugins for SVN and Maven.  (Remember, you will have to restart Eclipse after installing them.)
			We use the following plugins:
		</para>
		<table frame='all'>
			<title>Continuous integration jobs</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	      <colspec colname='c1' colwidth="1*"/>
	      <colspec colname='c2' colwidth="1*"/>
				<thead>
					<row>
			  		<entry>Eclipse Plugins</entry>
						<entry>Update Site URLs</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>Subversive SVN Client</entry>
						<entry>
							<ulink url="http://www.polarion.org/projects/subversive/download/eclipse/2.0/update-site/">http://www.polarion.org/projects/subversive/download/eclipse/2.0/update-site/</ulink>
						  <ulink url="http://www.polarion.org/projects/subversive/download/integrations/update-site/">http://www.polarion.org/projects/subversive/download/integrations/update-site/</ulink>
						</entry>
					</row>
					<row>
						<entry>Maven Integration for Eclipse</entry>
						<entry><ulink url="http://m2eclipse.sonatype.org/update/">http://m2eclipse.sonatype.org/update/</ulink></entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para>
			After you check out the JBoss DNA codebase, you can import the JBoss DNA Maven projects into Eclipse as Eclipse projects.
			To do this, go to "File->Import->Existing Projects", navigate to the <code>trunk/</code> folder in the import wizard,
			and then check each of the <link linkend="modules">subprojects</link> that you want to have in your workspace.
			Don't forget about the projects under <code>extensions/</code> or <code>docs/</code>.
		</para>
	</sect1>
	<sect1 id="releasing">
		<title>Releasing</title>
		<para>
			This section outlines the basic process of releasing JBoss DNA.  This <emphasis role="strong">must</emphasis> be done
			either by the project lead or only after communicating with the project lead.
		</para>
		<para>
			Before continuing, your local workspace should contain no changes and should be a perfect reflection of Subversion.
			You can verify this by getting the latest from Subversion
		</para>
		<programlisting>$ svn update</programlisting> 
		<para>
			and ensuring that you have no additional changes with
		</para>
		<programlisting>$ svn status</programlisting>
		<para>
			You may also want to note the revision number for use later on in the process.  The release number is returned by
			the <code>svn update</code> command, but may also be found using
		</para>
		<programlisting>$ svn info</programlisting>
		<para>
			At this point, you're ready to verify that everything builds normally.
		</para>
		<sect2 id="build-all-artifacts-and-assemblies">
			<title>Building all artifacts and assemblies</title>
			<para>
				By default, the project's Maven build process is does <emphasis>not</emphasis> build the documentation, JavaDocs, or assemblies.
				These take extra time, and most of our builds don't require them.  So the first step of releasing JBoss DNA
				is to use Maven to build all of regular artifacts (e.g., JARs) and these extra documents and assemblies.
			</para>
			<note>
				<para>
					Before running Maven commands to build the releases, increase the memory available to Maven with this command:
					<code>$ export MAVEN_OPTS=-Xmx256m</code>
				</para>
			</note>
			<para>
				To perform this complete build, issue the following command while in the <code>target/</code> directory:
			</para>
			<programlisting>$ mvn -P assembly clean javadoc:javadoc install</programlisting>
			<para>
				This command runs the "clean", "javadoc:javadoc", and "install" goals using the "assembly" profile, 
				which adds the production of JavaDocs, the Getting Started document, the Reference Guide document, 
				the Getting Started examples, and several ZIP archives.  The order of the goals is important,
				since the "install" goal attempts to include the JavaDoc in the archives. 
			</para>
			<para>
				After this build has completed, verify that the assemblies under <code>target/</code> have actually been created and that
				they contain the correct information.
				At this point, we know that the actual Maven build process is building
				everything we want and will complete without errors.  We can now proceed with preparing for the release.
			</para>
		</sect2>
		<sect2 id="determine-version">
			<title>Determine the version to be released</title>
			<para>
				The version being released should match the <ulink url="&JIRA;">JIRA</ulink> road map. Make sure that all issues related to the release are closed. 
				The project lead should be notified and approve that the release is taking place.
			</para>
		</sect2>
		<sect2 id="release-dry-run">
			<title>Release dry run</title>
			<para>
				The next step is to ensure that all information in the POM is correct and contains all the information required for
				the release process.  This is called a <emphasis>dry run</emphasis>, and is done with the Maven "release" plugin:
			</para>
			<programlisting>$ mvn -Passembly release:prepare -DdryRun=true</programlisting>
			<para>
				This may download a lot of Maven plugins if they already haven't been downloaded, but it will eventually prompt you for
				the release version of each of the Maven projects, the tag name for the release, and the next development versions
				(again for each of the Maven projects).  The default values are probably acceptable; if not, then check that the 
				"<code>&lt;version&gt;</code>" tags in each of the POM files is correct and end with "-SNAPSHOT".
			</para>
			<para>
				After the dry run completes you should clean up the files that the release plugin created in the dry run:
			</para>
			<programlisting>$ mvn -Passembly release:clean</programlisting>
		</sect2>
		<sect2 id="prepare-release">
			<title>Prepare for the release</title>
			<para>
				Run the prepare step (without the <code>dryRun</code> option):
			</para>
			<programlisting>$ mvn -Passembly release:prepare</programlisting>
			<para>
				You will again be prompted for the release versions and tag name. These should be the same as what was used during the dry run. 
				This will run the same steps as the dry run, with the additional step of tagging the release in SVN.  
			</para>
			<para>
				If there are any problems during this step, you should go back and try the dry run option.  But after this runs successfully,
				the release will be tagged in SVN, and the <code>pom.xml</code> files in SVN under <code>/trunk</code> will have the 
				next version in the "&lt;version&gt;" values.
				However, the artifacts for the release are not yet published.  That's the next step.
			</para>
		</sect2>
		<sect2 id="release">
			<title>Perform the release</title>
			<para>
				At this point, the release's artifacts need to be published to the JBoss Maven repository.  This next command check outs the
				files from the release tag created earlier (into a <code>trunk/target/checkout</code> directory), runs a build, and then
				deploys the generated artifacts.  Note that this ensures that the artifacts are built from the tagged code.
			</para>
			<programlisting>$ mvn release:perform -DuseReleaseProfile=false</programlisting>
			<note>
				<para>
					If during this process you get an error finding the released artifacts in your local Maven repository, you may 
					need to go into the <code>trunk/target/checkout</code> folder and run <code>$ mvn install</code>.  This is a simple
					workaround to make the artifacts available locally.  Another option to try is adding <code>-Dgoals=install,assembly</code> 
					to the <code>$ mvn release:perform... </code> command above.
				</para>
			</note>
			<para>
				The artifacts are deployed to the local file system, which is comprised of a local checkout of the JBoss Maven2 repository 
				in a location specified by a combination of the <code>&lt;distributionManagement&gt;</code> section of several <code>pom.xml</code> 
				files and your personal <code>settings.xml</code> file.  Once this Maven command completes, you will need to 
				commit the new files after they are deployed.  For more information, see the 
				<ulink url="http://wiki.jboss.org/wiki/Maven">JBoss wiki</ulink>.
			</para>
			<para>
				At this point, the software has been released and tagged, and it's been deployed to a local checked-out copy of the 
				JBoss DNA Maven 2 repository (via the "&lt;distribution&gt;" section of the pom.xml files).  Those need to be committed
				into the Maven 2 repository using SVN.  And finally, the last thing is to publish the release onto
				the project's <ulink url="&Downloads;">downloads</ulink> and <ulink url="&Home;/docs">documentation</ulink> pages.
			</para>
			<para>
				The assemblies of the source, binaries, etc. also need to be published onto the &Downloads; area of the
				<ulink url="http://www.jboss.org/dna">the project page</ulink>.  This process is expected to change, as <ulink url="http://www.jboss.org">JBoss.org</ulink>
				improves its infrastructure.
			</para>
		</sect2>
	</sect1>
	<sect1>
		<title>Summary</title>
		<para>
			In this chapter, we described the various aspects of developing code for the JBoss DNA project.  Before we start talking
			about some of the details of JBoss DNA repositories, connectors, and sequencers, we'll first talk about
			some very ubiquitous information: how does JBoss DNA load all of the extension classes?
		  This is the topic of the <link linkend="classloaders">next chapter</link>.
		</para>
	</sect1>
</chapter>
