<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  ~ ModeShape (http://www.modeshape.org)
  ~
  ~ See the COPYRIGHT.txt file distributed with this work for information
  ~ regarding copyright ownership.  Some portions may be licensed
  ~ to Red Hat, Inc. under one or more contributor license agreements.
  ~ See the AUTHORS.txt file in the distribution for a full listing of 
  ~ individual contributors.
  ~
  ~ ModeShape is free software. Unless otherwise indicated, all code in ModeShape
  ~ is licensed to you under the terms of the GNU Lesser General Public License as
  ~ published by the Free Software Foundation; either version 2.1 of
  ~ the License, or (at your option) any later version.
  ~
  ~ ModeShape is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
  ~ for more details.
  ~
  ~ You should have received a copy of the GNU Lesser General Public License
  ~ along with this distribution; if not, write to:
  ~ Free Software Foundation, Inc.
  ~ 51 Franklin Street, Fifth Floor
  ~ Boston, MA  02110-1301  USA
  -->
<configuration xmlns:mode="http://www.modeshape.org/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
    <!-- Define the sources from which content is made available -->
    <mode:sources jcr:primaryType="nt:unstructured">
        <mode:source jcr:name="repository" mode:classname="org.modeshape.graph.connector.inmemory.InMemoryRepositorySource" mode:retryLimit="3" mode:defaultWorkspaceName="default"/>
    </mode:sources>
    
    <mode:sequencers>
			  <!-- These are configured for demonstration purposes. For real use, adjust the path expressions and use those appropriate for your use case. -->
        <mode:sequencer jcr:name="Delimited Text File Sequencer" mode:classname="org.modeshape.sequencer.text.FixedWidthTextSequencer">
            <mode:description>Sequences *.csv text files loaded into the repository under '/files', extracting comma-separated and delimited files into columnar information.</mode:description>        
            <mode:pathExpression>/files//(*.csv[*])/jcr:content[@jcr:data] => /sequenced/text/delimited/$1 </mode:pathExpression>
						<!-- The split pattern is a regular expression used to split each row into columns. -->
						<mode:splitPattern>,</mode:splitPattern>
        </mode:sequencer>
        <mode:sequencer jcr:name="Fixed Width Text File Sequencer" mode:classname="org.modeshape.sequencer.text.FixedWidthTextSequencer">
            <mode:description>Sequences *.txt fixed-width text files loaded into the repository under '/files', extracting splitting rows into columns based on predefined positions.</mode:description>        
            <mode:pathExpression>/files//(*.txt[*])/jcr:content[@jcr:data] => /sequenced/text/fixedWidth/$1 </mode:pathExpression>
						<!-- The 'columnStartPositions' define the 0-based column start positions. Everything before the 
						     first start position is treated as the first column. The default value is the empty string 
						     (implying that each row should be treated as a single column). There is an implicit column 
						     start position of 0 that never needs to be specified. -->
						<mode:columnStartPositions></mode:columnStartPositions>
        </mode:sequencer>
        <mode:sequencer jcr:name="Teiid Model Sequencer" mode:classname="org.modeshape.sequencer.teiid.ModelSequencer">
            <mode:description>Sequences Teiid relational models (e.g., *.xmi) loaded into the repository under '/files', extracting the structure defined in the models.</mode:description>        
            <mode:pathExpression>/files//(*.xmi[*])/jcr:content[@jcr:data] => /sequenced/teiid/models/$1 </mode:pathExpression>
        </mode:sequencer>
        <mode:sequencer jcr:name="Class File Sequencer" mode:classname="org.modeshape.sequencer.classfile.ClassFileSequencer">
            <mode:description>Sequences Java class files loaded into the repository under '/files', extracting structural information.</mode:description>        
            <mode:pathExpression>/files//(*.class[*])/jcr:content[@jcr:data] => /sequenced/class/$1 </mode:pathExpression>
        </mode:sequencer>
        <mode:sequencer jcr:name="Java File Sequencer" mode:classname="org.modeshape.sequencer.java.JavaMetadataSequencer">
            <mode:description>Sequences Java source files loaded into the repository under '/files', extracting structural information.</mode:description>        
            <mode:pathExpression>/files//(*.java[*])/jcr:content[@jcr:data] => /sequenced/java/$1 </mode:pathExpression>
        </mode:sequencer>
        <mode:sequencer jcr:name="CND File Sequencer" mode:classname="org.modeshape.sequencer.cnd.CndSequencer">
            <mode:description>Sequences CND files loaded into the repository under '/files', extracting the contained node type definitions.</mode:description>        
            <mode:pathExpression>/files//(*.cnd[*])/jcr:content[@jcr:data] => /sequenced/cnd/$1 </mode:pathExpression>
        </mode:sequencer>
        <mode:sequencer jcr:name="DDL File Sequencer" mode:classname="org.modeshape.sequencer.ddl.DdlSequencer">
            <mode:description>Sequences DDL files loaded into the repository under '/files', extracting the structured abstract syntax tree of the DDL commands and expressions.</mode:description>        
            <mode:pathExpression>/files//(*.ddl[*])/jcr:content[@jcr:data] => /sequenced/ddl/$1 </mode:pathExpression>
        </mode:sequencer>     
        <mode:sequencer jcr:name="MS Office File Sequencer" mode:classname="org.modeshape.sequencer.msoffice.MSOfficeMetadataSequencer">
            <mode:description>Sequences Microsoft Office documents and presentations under '/files', extracting summary information and structure.</mode:description>        
            <mode:pathExpression>/files//(*.(xls|ppt|doc)[*])/jcr:content[@jcr:data] => /sequenced/msoffice/$1 </mode:pathExpression>
        </mode:sequencer>
        <mode:sequencer jcr:name="XML File Sequencer" mode:classname="org.modeshape.sequencer.xml.XmlSequencer">
            <mode:description>Sequences XML files loaded into the repository under '/files', extracting the contents into the equivalent JCR graph structure.</mode:description>        
            <mode:pathExpression>/files//(*.xml[*])/jcr:content[@jcr:data] => /sequenced/xml/$1 </mode:pathExpression>
        </mode:sequencer>  
        <mode:sequencer jcr:name="ZIP File Sequencer" mode:classname="org.modeshape.sequencer.zip.ZipSequencer">
            <mode:description>Sequences ZIP files loaded into the repository under '/files', extracting the archive file contents into the equivalent JCR graph structure of 'nt:file' and 'nt:folder' nodes.</mode:description>        
            <mode:pathExpression>/files//(*.zip[*])/jcr:content[@jcr:data] => /sequenced/zip/$1 </mode:pathExpression>
        </mode:sequencer>                          
        <!--
        <mode:sequencer jcr:name="JBPM-JPDL File Sequencer" mode:classname="org.modeshape.sequencer.jpdl3.xxSequencer">
            <mode:description>JBPM-JPDL File sequencer</mode:description>        
            <mode:pathExpression>/files/jbpm-jpdlfile/(*.jpbm[*])/jcr:content[@jcr:data] => /sequenced/jbpm/$1 </mode:pathExpression>
        </mode:sequencer>    
        -->
    </mode:sequencers>
    
    <!-- Define the JCR repositories -->
    <mode:repositories>
        <!-- Specify the source that should be used for the repository -->
        <mode:repository jcr:name="repository" >
            <mode:source>repository</mode:source>
            <!-- Define the options for the JCR repository, using camelcase version of JcrRepository.Option names-->
            <mode:options jcr:primaryType="options">
                <projectNodeTypes jcr:primaryType="option" value="false"/>
            </mode:options>
            <!-- Define any custom node types. Importing CND files via JcrConfiguration is equivalent to specifying here.-->
            <jcr:nodeTypes>
                <mode:resource>/org/modeshape/connector/meta/jdbc/connector-metajdbc.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/classfile/sequencer-classfile.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/image/images.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/java/javaSource.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/mp3/mp3.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/msoffice/msoffice.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/text/sequencer-text.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/xml/xml.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/zip/zip.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/ddl/StandardDdl.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/ddl/dialect/derby/DerbyDdl.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/ddl/dialect/oracle/OracleDdl.cnd</mode:resource>
                <mode:resource>/org/modeshape/sequencer/ddl/dialect/postgres/PostgresDdl.cnd</mode:resource>
            </jcr:nodeTypes>
        </mode:repository>
    </mode:repositories>
</configuration>