/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2008, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors. 
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

/**
 * @author Serge Pagop (serge.pagop@innoq.com)
 */

//------------------------------------------------------------------------------
// N A M E S P A C E S
//------------------------------------------------------------------------------
<java='http://www.jboss.org/dna/java/1.0'>
<nt='http://www.jcp.org/jcr/nt/1.0'>
<mix='http://www.jcp.org/jcr/mix/1.0'>

//------------------------------------------------------------------------------
// B A S E  T Y P E S
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// V E R S I O N I N G
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// N O D E T Y P E S
//------------------------------------------------------------------------------

/**
 * Element-value
 */
[java:elementValue] > nt:unstructured
 + java:kindOfvalues (java:conditionalExpression, java:annotationType, java:elementValueArrayInitializer) mandatory

/**
 * Expression element-value type
 */
[java:conditionalExpression] > nt:unstructured
 - java:expression (string)

/**
 * Array initializer element-value type
 */
[java:elementValueArrayInitializer] > nt:unstructured
 + java:elementValue (java:elementValue) = java:elementValue multiple

/**
 * Identifier
 */
[java:identifier] > nt:unstructured
 - java:sampleName (String) mandatory
 + java:value (java:elementValue) = java:elementValue mandatory
 
/**
 * Element-value pair
 */
[java:elementValuePair] > nt:unstructured
 + java:identifier (java:identifier) mandatory

/**
 * Annotation type
 */
[java:annotationDeclaration] > nt:unstructured
 + java:annotationType (java:normalAnnotation, java:markerAnnotation,  java:singleElementAnnotation) mandatory
  
/**
 * Normal annotation e.g. @Entity(name="Customer")
 */
[java:normalAnnotation] > nt:unstructured
 - java:typeName (string) mandatory
 + java:elementValuePair (java:elementValuePair)

/**
 * Marker annotation e.g. @GET
 */
[java:markerAnnotation] > nt:unstructured
 - java:typeName (string) mandatory

/**
 * Single element annotation  e.g. @Path("/book")
 */
[java:singleElementAnnotation] > nt:unstructured
 + java:value (java:elementValue) = java:elementValue mandatory

/** 
 * Formal parameter
 */
[java:formalParameter] > nt:unstructured
 - java:name (string)
 + java:type (java:primitiveType, java:referenceType) mandatory multiple

/**
 * Primitive type:
 * - Integral type ('byte', 'short', 'int', 'long', 'char')
 * - Floating point type ('float', 'double')
 * - Boolean type ('boolean')
 * - No return type (''void')
 */
[java:primitiveType] > nt:unstructured
 - java:description (string)
 - java:modifier (string)
    < 'public', 'protected', 'private'
 - java:declaredAs (string) multiple
   < 'static','final', 'transient', 'volatile'
 - java:type (string)
   < 'byte','short','char','int,'long','float','double','boolean','void'
 - java:name (string) mandatory
 
/** 
 * Reference type  (TODO to enhance)
 */	
[java:referenceType] > nt:unstructured
- java:description (string)
 - java:modifier (string)
    < 'public', 'protected', 'private'
 - java:declaredAs (string) multiple
   < 'static','final', 'transient', 'volatile'
 - java:name (string) mandatory
 
/** 
 * Field type 
 */
[java:fieldType] > nt:unstructured
 + java:type (java:primitiveType, java:referenceType) mandatory multiple 
 
 /** 
  * Method declaration 
  */
[java:methodDeclaration] > nt:unstructured
 - java:description (string)
 - java:modifier (string)
   < 'public', 'protected', 'private'
 + java:resultType (java:primitiveType, java:referenceType) mandatory
 - java:name (string) mandatory
 - java:declaredAs (string) multiple
   < 'static','final', 'native', 'strictfp', 'synchronized'
 + java:parameter (java:formalParameter) multiple

/** 
 * Constructor declarations 
 */
[java:constructorDeclaration] > nt:unstructured
 - java:description (string)
 - java:modifier (string)
  < 'public', 'protected', 'private'
 - java:name (string) mandatory
 + java:parameter (java:formalParameter)


/**
 * Package declarations
 */
[java:packageDeclaration] > nt:unstructured
 + java:annotation (java:annotationDeclaration) = java:annotationDeclaration
 - java:keyword (string)
   < 'package' 
 - java:packageName (string) mandatory 

/**
 * Import declarations
 */
[java:singleTypeImportDeclaration] > nt:unstructured
 - java:keyword (string) mandatory
  < 'import'
 - java:typeName (string) mandatory
 
[java:typeImportOnDemandDeclaration] > nt:unstructured
 - java:keyword (string) mandatory
  < 'import'
 - java:typeName (string) mandatory

 [java:importDeclaration] > nt:unstructured
 + java:singleImport (java:singleTypeImportDeclaration) = java:singleTypeImportDeclaration
 + java:importOnDemand (java:typeImportOnDemandDeclaration) = java:typeImportOnDemandDeclaration

/**
 * Class declaration
 *
 * The body of class declares members (fields and methods and nested classes and interfaces), 
 * instance and static initializers, and constructors
 */
[java:normalClassDeclaration] > nt:unstructured
 - java:description (string)
 - java:modifier (string)
  < 'public'
 - java:declaredAs (string) 
  < 'abstract', 'final'
 - java:name (string) mandatory
 + java:field (java:fieldType)  = java:fieldType multiple
 + java:method (java:methodDeclaration) = java:methodDeclaration multiple
 + java:constructor (java:constructorDeclaration) = java:constructorDeclaration multiple
 
[java:enumDeclaration] > nt:unstructured
 
[java:classDeclaration] > nt:unstructured
 + java:normalClass (java:normalClassDeclaration) = java:normalClassDeclaration
 + java:enum (java:enumDeclaration) = java:enumDeclaration

/**
 * Interface declaration 
 *
 * The body of class declares members (fields and methods and nested classes and interfaces), 
 * instance and static initializers, and constructors
 */
 //TODO
[java:interfaceDeclaration] > nt:unstructured
 
 
/**
 * Compilation unit
 */
[java:compilationUnit] > nt:unstructured
 + java:package (java:packageDeclaration) = java:packageDeclaration
 + java:import (java:importDeclaration) = java:importDeclaration
 + java:unitType (java:classDeclaration, java:interfaceDeclaration) 